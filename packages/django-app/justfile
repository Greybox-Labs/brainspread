default:
  @just --list

# Execute django-admin commands in web container with database safety checks
django-admin +ARGS:
  #!/usr/bin/env bash
  set -euo pipefail

  # Check database environment
  DB_HOST_ENVAR=$(docker-compose run --rm -w /code/app web env | grep POSTGRES_HOST)
  DB_HOST=$(cut -d "=" -f2 <<< "$DB_HOST_ENVAR")
  # Trim newline
  DB_HOST=${DB_HOST//[$'\t\r\n']}

  if [ "$DB_HOST" != 'db' ] && [ "$DB_HOST" != '0.0.0.0' ] && [ "$DB_HOST" != 'localhost' ]; then
    echo "You are running this command against the database at ${DB_HOST}!"
    read -r -p "Are you sure you want to continue? [y/N] " response
    if [[ ! "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      exit 1
    fi
  else
    echo "Running command against database at $DB_HOST..."
  fi

  docker-compose run --rm -w /code/app web /code/app/manage.py {{ARGS}}

# Execute shell commands in running web container
exec +ARGS:
  docker-compose exec web {{ARGS}}

# Install pipenv package (dev or prod) 
install-package PACKAGE DEV="":
  #!/usr/bin/env bash
  set -euo pipefail
  
  if [ "{{DEV}}" = "--dev" ]; then
    echo "Installing {{PACKAGE}} as dev dependency..."
    pipenv install --dev {{PACKAGE}}
  else
    echo "Installing {{PACKAGE}} as production dependency..."
    pipenv install {{PACKAGE}}
  fi
  
  echo "Rebuilding containers with new dependencies..."
  docker-compose build web

# Install dev package shorthand
install-dev PACKAGE:
  just install-package {{PACKAGE}} --dev

# Update pipenv dependencies
update-deps:
  pipenv update
  docker-compose build web

# Generate Django secret key
generate-secret-key:
  docker-compose run --rm -w /code/app web python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'

# Run tests in web container
# Examples:
#   just test path/to/test_file.py                           # specific file
#   just test path/to/test_file.py::TestClass                # specific class
#   just test path/to/test_file.py::TestClass::test_method   # specific method
#   just test path/to/app                                    # specific django app
#   just test -k "pattern"                                   # name pattern
#   just test -m "marker"                                    # specific marker
#   just test path/to/tests/ --cov=module                    # with coverage
test +ARGS="":
  #!/usr/bin/env bash
  if [ -z "{{ARGS}}" ]; then
    docker-compose run --rm -w /code/app web pytest --cov=. --verbose
  else
    docker-compose run --rm -w /code/app web pytest {{ARGS}}
  fi

# Run shell commands in new web container
run +ARGS:
  docker-compose run --rm web {{ARGS}}

# Create Docker volumes
create-volumes:
  docker volume create --name=${POSTGRES_VOLUME_NAME:-brainspread_postgres}

# Dump database data to stdout
dump-data:
  docker-compose run --rm -w /code/app web /code/app/manage.py dumpdata \
    --natural-primary \
    --natural-foreign \
    --exclude=admin.logentry \
    --exclude=sessions.session \
    --indent 4

# Reload database with optional data fixture (defaults to dev_data.json)
reload-db DATA="dev_data.json":
  #!/usr/bin/env bash
  set -euo pipefail

  # Check database environment
  DB_HOST_ENVAR=$(docker-compose run --rm -w /code/app web env | grep POSTGRES_HOST)
  DB_HOST=$(cut -d "=" -f2 <<< "$DB_HOST_ENVAR")
  # Trim newline
  DB_HOST=${DB_HOST//[$'\t\r\n']}

  if [ "$DB_HOST" != 'db' ] && [ "$DB_HOST" != '0.0.0.0' ] && [ "$DB_HOST" != 'localhost' ]; then
    echo "You are trying to reload the database at ${DB_HOST}!"
    read -r -p "Are you sure you want to continue? [y/N] " response
    if [[ ! "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      exit 1
    fi
  else
    echo "Reloading database at $DB_HOST"
  fi

  echo "starting script ..."
  echo "Reloading $DB_HOST w/ {{DATA}} ..."
  echo ""

  echo "recreating volume and container ..."
  # Stop and remove db container
  docker-compose stop db
  docker-compose rm -f db

  # Remove and recreate postgres volume
  docker volume rm ${POSTGRES_VOLUME_NAME:-brainspread_postgres} || true
  docker volume create --name=${POSTGRES_VOLUME_NAME:-brainspread_postgres}

  # Bring container back up and wait for db
  docker-compose up -d db
  sleep 5

  echo "running migrations ..."
  docker-compose run --rm -w /code/app web /code/app/manage.py migrate

  echo "loading data from {{DATA}} ..."
  docker-compose run --rm -w /code/app web /code/app/manage.py loaddata {{DATA}}


# Common Django management commands shortcuts
migrate:
  just django-admin migrate

makemigrations:
  just django-admin makemigrations

shell:
  just django-admin shell

collectstatic:
  just django-admin collectstatic --noinput

# Database shortcuts
dbshell:
  just django-admin dbshell

# Load specific fixture
loaddata FIXTURE:
  just django-admin loaddata {{FIXTURE}}

# Show migrations status
showmigrations:
  just django-admin showmigrations

# Show only unapplied migrations
showundonemigrations:
  #!/usr/bin/env bash
  set -euo pipefail
  echo "Checking for unapplied migrations..."
  undone=$(just django-admin showmigrations --plan | grep -E "^\[ \]" || true)
  if [ -z "$undone" ]; then
    echo "‚úÖ No unapplied migrations found!"
  else
    echo "‚ùå Found unapplied migrations:"
    echo "$undone"
  fi

# Check for model changes that need migrations
check-pending-migrations:
  #!/usr/bin/env bash
  set -euo pipefail
  echo "Checking for model changes that need migrations..."
  if just django-admin makemigrations --check --dry-run > /dev/null 2>&1; then
    echo "‚úÖ No pending migrations needed!"
  else
    echo "‚ùå Model changes detected that need migrations!"
    echo "Run 'just makemigrations' to create them."
  fi

# Docker compose shortcuts
up:
  docker-compose up

up-d:
  docker-compose up -d

down:
  docker-compose down

build:
  docker-compose build

logs SERVICE="":
  @if [ -z "{{SERVICE}}" ]; then \
    docker-compose logs -f; \
  else \
    docker-compose logs -f {{SERVICE}}; \
  fi

# Show last N lines of logs (defaults to 100)
tail-logs SERVICE="" LINES="100":
  @if [ -z "{{SERVICE}}" ]; then \
    docker-compose logs --tail {{LINES}}; \
  else \
    docker-compose logs --tail {{LINES}} {{SERVICE}}; \
  fi

# Show container status
ps:
  docker-compose ps

# Clean up project Docker resources
dcp-cleanup:
  docker-compose stop
  docker-compose rm -f db web
  docker volume rm ${POSTGRES_VOLUME_NAME:-brainspread_postgres}

# Setup local Python virtual environment
setup-local-python-venv:
  python3 -m venv .venv
  source .venv/bin/activate
  PIPENV_VENV_IN_PROJECT=1 pipenv install --dev --deploy

# Copy environment template file
copy-env:
  cp .env.template .env

# Create Django superuser
create-superuser:
  just django-admin createsuperuser

default_backups_location := "./backups"

# Create backup with pgdump
create-pgdump location=default_backups_location:
  #!/usr/bin/env bash
  set -euo pipefail
  mkdir -p {{location}}
  docker-compose exec db pg_dump -U $POSTGRES_USER $POSTGRES_DB > {{location}}/`date +%Y-%m-%d_%H-%M-%S`-brainspread-dump.sql

# Create JSON backup of the database
create-json-backup location=default_backups_location:
  #!/usr/bin/env bash
  set -euo pipefail
  mkdir -p {{location}}
  just dump-data > {{location}}/`date +%Y-%m-%d_%H-%M-%S`-brainspread-dump.json

# Format Python code
format-py:
  docker-compose run --rm -w /code/app web python -m black . --exclude="migrations/"

# Check Python formatting (Black)
format-check-py:
  docker-compose run --rm -w /code/app web python -m black . --check --exclude="migrations/"

# Format JavaScript code
format-js:
  npx prettier --write .

# Format all code (Python and JavaScript)
format:
  just format-py
  just format-js

# Format alias
alias f := format

# Lint Python code with ruff
lint-py:
  docker-compose run --rm -w /code/app web ruff check . \
    --exclude="**/migrations/**" \
    --exclude="migrations/" \
    --exclude=".venv/" \
    --exclude="__pycache__/"

# Fix Python linting issues automatically
lint-py-fix:
  docker-compose run --rm -w /code/app web ruff check . \
    --exclude="**/migrations/**" \
    --exclude="migrations/" \
    --exclude=".venv/" \
    --exclude="__pycache__/" \
    --fix

# Lint all code
lint:
  just lint-py

# Initialize project - create volumes, build images, setup database
init:
  just create-volumes
  just build
  just up-d db
  sleep 5
  just migrate
  echo "Project initialized! Run 'just copy-env' and add your SECRET_KEY, then 'just create-superuser' to get started."

# Pre-push checks - runs all tests, formatters, linters, and Django checks
prepush:
  #!/usr/bin/env bash
  set -euo pipefail
  
  echo "üöÄ Running pre-push checks..."
  echo ""
  
  echo "1Ô∏è‚É£  Formatting Python code..."
  just format-py
  echo "‚úÖ Python formatting complete"
  echo ""
  
  echo "2Ô∏è‚É£  Formatting JavaScript code..."
  just format-js
  echo "‚úÖ JavaScript formatting complete"
  echo ""
  
  echo "3Ô∏è‚É£  Linting Python code..."
  just lint-py-fix
  echo "‚úÖ Python linting passed"
  echo ""
  
  echo "4Ô∏è‚É£  Running Django system checks..."
  docker-compose run --rm -w /code/app web python manage.py check --deploy
  echo "‚úÖ Django checks passed"
  echo ""
  
  echo "5Ô∏è‚É£  Running tests with coverage..."
  just test
  echo "‚úÖ All tests passed"
  echo ""
  
  echo "6Ô∏è‚É£  Checking for missing migrations..."
  docker-compose run --rm -w /code/app web python manage.py makemigrations --check --dry-run
  echo "‚úÖ No missing migrations"
  echo ""
  
  echo "üéâ All pre-push checks passed! Ready to push! üéâ"

# AI Tools
# start playwright mcp server
ai-start-playwright-mcp:
  npx @playwright/mcp@latest --port 8931
