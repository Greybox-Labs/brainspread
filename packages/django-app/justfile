default:
  @just --list

# Execute django-admin commands in web container with database safety checks
django-admin +ARGS:
  #!/usr/bin/env bash
  set -euo pipefail
  
  # Check database environment
  DB_HOST_ENVAR=$(docker-compose run --rm -w /code/app web env | grep POSTGRES_HOST)
  DB_HOST=$(cut -d "=" -f2 <<< "$DB_HOST_ENVAR")
  # Trim newline
  DB_HOST=${DB_HOST//[$'\t\r\n']}
  
  if [ "$DB_HOST" != 'db' ] && [ "$DB_HOST" != '0.0.0.0' ] && [ "$DB_HOST" != 'localhost' ]; then
    echo "You are running this command against the database at ${DB_HOST}!"
    read -r -p "Are you sure you want to continue? [y/N] " response
    if [[ ! "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      exit 1
    fi
  else
    echo "Running command against database at $DB_HOST..."
  fi
  
  docker-compose run --rm -w /code/app web /code/app/manage.py {{ARGS}}

# Execute shell commands in running web container
exec +ARGS:
  docker-compose exec web {{ARGS}}

# Generate Django secret key
generate-secret-key:
  docker-compose run --rm -w /code/app web python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'

# Run tests in web container
test:
  docker-compose run --rm -w /code/app web pytest -m "not integration" --cov=. --verbose

# Run shell commands in new web container
run +ARGS:
  docker-compose run --rm web {{ARGS}}

# Create Docker volumes
create-volumes:
  docker volume create --name=brainspread_postgres

# Dump database data to stdout
dump-data:
  docker-compose run --rm -w /code/app web /code/app/manage.py dumpdata \
    --natural-primary \
    --natural-foreign \
    --exclude=admin.logentry \
    --exclude=sessions.session \
    --indent 4

# Reload database with optional data fixture (defaults to dev_data.json)
reload-db DATA="dev_data.json":
  #!/usr/bin/env bash
  set -euo pipefail
  
  # Check database environment
  DB_HOST_ENVAR=$(docker-compose run --rm -w /code/app web env | grep POSTGRES_HOST)
  DB_HOST=$(cut -d "=" -f2 <<< "$DB_HOST_ENVAR")
  # Trim newline
  DB_HOST=${DB_HOST//[$'\t\r\n']}
  
  if [ "$DB_HOST" != 'db' ] && [ "$DB_HOST" != '0.0.0.0' ] && [ "$DB_HOST" != 'localhost' ]; then
    echo "You are trying to reload the database at ${DB_HOST}!"
    read -r -p "Are you sure you want to continue? [y/N] " response
    if [[ ! "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      exit 1
    fi
  else
    echo "Reloading database at $DB_HOST"
  fi
  
  echo "starting script ..."
  echo "Reloading $DB_HOST w/ {{DATA}} ..."
  echo ""
  
  echo "recreating volume and container ..."
  # Stop and remove db container
  docker-compose stop db
  docker-compose rm -f db
  
  # Remove and recreate postgres volume
  docker volume rm brainspread_postgres || true
  docker volume create --name=brainspread_postgres
  
  # Bring container back up and wait for db
  docker-compose up -d db
  sleep 5
  
  echo "running migrations ..."
  docker-compose run --rm -w /code/app web /code/app/manage.py migrate
  
  echo "loading data from {{DATA}} ..."
  docker-compose run --rm -w /code/app web /code/app/manage.py loaddata {{DATA}}


# Common Django management commands shortcuts
migrate:
  just django-admin migrate

makemigrations:
  just django-admin makemigrations

shell:
  just django-admin shell

collectstatic:
  just django-admin collectstatic --noinput

# Start development server
runserver:
  just django-admin runserver 0.0.0.0:8000

# Database shortcuts
dbshell:
  just django-admin dbshell

# Load specific fixture
loaddata FIXTURE:
  just django-admin loaddata {{FIXTURE}}

# Show migrations status
showmigrations:
  just django-admin showmigrations

# Docker compose shortcuts
up:
  docker-compose up

up-d:
  docker-compose up -d

down:
  docker-compose down

build:
  docker-compose build

logs SERVICE="":
  @if [ -z "{{SERVICE}}" ]; then \
    docker-compose logs -f; \
  else \
    docker-compose logs -f {{SERVICE}}; \
  fi

# Clean up project Docker resources
dcp-cleanup:
  docker-compose stop
  docker-compose rm -f db web
  docker volume rm brainspread_postgres
